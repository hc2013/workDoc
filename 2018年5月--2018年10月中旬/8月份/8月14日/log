9:59分，经过比对，发现WKTReader真正确实的部分，就只是CompoundCurve和CircularString这两个LineString的子类而已

尝试一下，向上转换，看有没有坐标损失

=====================================================================================================
LINESTRING (LINESTRING (10.0 45.0, 20.0 45.0), CIRCULARSTRING (20.0 45.0, 23.0 48.0, 20.0 51.0)," +
            " LINESTRING (20.0 51.0, 10.0 51.0)

CIRCULARSTRING：单纯的把CircularString转为LineString是能够通过的，坐标没有损失，但是不能自动识别为CIRCULARSTRING
	也就是发生了坐标模糊

而对于CompoundCurve，若改为LineString则在解析阶段,把String当成Double去解析，直接报错

================================================================================================
1,经过比对，大部分的基本类型都是可以支持的，那么结论应以用户数据的情况为准

================================================================================================
添加功能
     1.在索引不存在的情况下新建索引的功能
     2.数据损失的时候，格式转换和输出重定向的功能


=====================================================================================
ES获取一个索引中的所有数据
GET /test2/test_type/_search?pretty

=====================================================================================
拿到部分客户数据，是ST_GEOMETRY，有点意外
===============================================================================

理清思路，现在的问题

1,这个用户数据该怎么导入到Oracle里面？

2，这个数据取出来，怎么转化为WKT?

================================================================================
layer=table+column
	(也就是说，layer是由一张表和表中一列组成的，一个逻辑实体）

=======================================================================================
导入ST_GEOMETRY失败，只是ST_POINT成功插入了，其他的都没有无法插入，报出Call Exception
	是需要配置Lisener?


================================================================================================

INSERT INTO GEOMS (id, geometry) VALUES (1901,sde.st_point (0, 0, 100));



======================================================================================================
Oracle Data pump
=================================================================================================================
CREATE USER sh Identified as 123;//Oracle创建用户

Oracle Data dump

CONN / as sysdba;
	报出Insuffient问题

Oracle Data dump成功！！！
==================================================================================================================



















